as.Date()
library(devtools)
document()
document()
library(visTools)
library(visTools)
library(testthat)
test_that("filename is character", {
expect_that(eq_location_clean("abc : def"),is_a("character"))
})
eq_location_clean("abc : def")
test_that("Checking the GeomTimeline", {
# Checking the class of GeomTimeline.
expect_is(GeomTimeline, "Geom")
expect_is(GeomTimeline, "ggproto")
expect_is(GeomTimeline, "gg")
})
str(GeomTimeline)
test_that("Checking the GeomTimeline", {
# Checking GeomTimeline classes
expect_is(GeomTimeline, "ggproto")
expect_is(GeomTimeline, "Geom")
expect_is(GeomTimeline, "gg")
})
test_that("Checking the GeomTimelineLabel", {
# Checking GeomTimelineLabel classes
expect_is(GeomTimelineLabel, "character")
expect_is(GeomTimelineLabel, "Geom")
expect_is(GeomTimelineLabel, "gg")
})
earthquakes <- read.delim("../CapstoneProject/earthquakes.txt")
earthquakes <- read.delim("../../CapstoneProject/earthquakes.txt")
library(devtools)
use_data("earthquakes")
use_data(earthquakes)
test_that("eq_create_label return is character", {
expect_that(eq_create_label(data.frame(LOCATION="X", EQ_PRIMARY=2, TOTAL_DEATHS=7)), is_a("character"))
})
eq_create_label(data.frame(LOCATION="X", EQ_PRIMARY=2, TOTAL_DEATHS=7)
)
test_that("eq_create_label return is character", {
expect_that(eq_create_label(data.frame(LOCATION="X", EQ_PRIMARY=2, TOTAL_DEATHS=7)), is_a("character"))
})
eq_map(earthquakes)
library(dplyr)
earthquakes %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
earthquakes %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
geom_timeline()
earthquakes %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
ggplot(aes(x = DATE)) + geom_timeline()
earthquakes %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
ggplot2::ggplot(aes(x = DATE)) + geom_timeline()
earthquakes %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE)) + geom_timeline()
p <- earthquakes %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE)) + geom_timeline()
str(p)
p$layers[[1]]$geom
expect_is(p$layers[[1]]$geom, "gg")
expect_is(p$layers[[1]]$geom, "GeomTimeline")
expect_is(p$layers[[1]]$geom, "GeomTimelineLabel")
q <- earthquakes %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE)) + geom_timeline() + geom_timeline_label()
expect_is(q$layers[[1]]$geom, "GeomTimelineLabel")
str(q)
#' @param **x** Array of date class.
#' @param **label** Array of char class. Ideally contains the earthquakes
#' location treated with \code{eq_clean_data} function.
#' @param n_max Value to the maximum number of earthquakes location printed in
#' plot. It must be passed an array to size parameter in GeomTimeline to work.
#'
#' @importFrom ggplot2 ggproto Geom aes draw_key_blank
#' @importFrom grid textGrob unit gpar polylineGrob gList
#'
#' @export
GeomTimelineLabel <-
ggplot2::ggproto("GeomTimelineLabel", ggplot2::Geom,
required_aes = c("x", "label"),
default_aes = ggplot2::aes(y = 0.3, size = 1.0,
colour = "grey", fill = "grey", n_max = NA),
draw_key = ggplot2::draw_key_blank,
draw_panel = function(data, panel_scales, coord){
coords <- coord$transform(data,panel_scales)
# slicing data from any number of countries
if(!is.na(coords$n_max[1])){
tmp <- NULL; tmpdf <- NULL
for(i in unique(coords$group)){
tmp <- coords[which(coords$group == i),]
tmp <- tmp[order(tmp$size, decreasing = TRUE)[1:coords$n_max[1]],]
tmpdf <- rbind(tmpdf, tmp)
}
coords <- tmpdf
}
locations <- grid::textGrob(
label = coords$label,
x = grid::unit(coords$x, "npc"),
y = grid::unit(coords$y + 0.05, "npc"),
just = c("left", "bottom"),
gp = grid::gpar(fontsize = 12, col = 'black'),
rot = 60
)
lines <- grid::polylineGrob(
x = grid::unit(c(coords$x, coords$x), "npc"),
y = grid::unit(c(coords$y + .01, coords$y + .04), "npc"),
id = rep(1:length(coords$x),2),
gp = grid::gpar(col = "grey")
)
grid::gList(locations, lines)
}
)
#' dplyr::filter(COUNTRY %in% c("CHINA", "USA") & lubridate::year(DATE) >= 2000) %>%
#' ggplot2::ggplot(ggplot2::aes(x = DATE, y = COUNTRY, size = EQ_PRIMARY, colour = DEATHS)) +
#' geom_timeline() +
#' geom_timeline_label(ggplot2::aes(label = LOCATION, n_max = 6)) +
#' xlab("Date") + ylab("") +
#' labs(size = "Richter scale", color = "# deaths" ) +
#' theme(axis.line.y=element_blank(),panel.background=element_blank())
#' }
#'
#' @export
geom_timeline_label <- function(mapping = NULL, data = NULL, stat = "identity",
position = "identity", na.rm = FALSE,
show.legend = NA, inherit.aes = TRUE, ...) {
ggplot2::layer(
geom = GeomTimelineLabel, mapping = mapping,
data = data, stat = stat, position = position,
show.legend = show.legend, inherit.aes = inherit.aes,
params = list(na.rm = na.rm, ...)
)
}
q <- earthquakes %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE)) + geom_timeline() + geom_timeline_label()
str(q)
expect_is(q$layers[[1]]$geom, "GeomTimelineLabel")
expect_is(q$layers[[2]]$geom, "GeomTimelineLabel")
test_that("Checking geom_timeline_label", {
# Checking geom_timeline_label layer class
expect_is(p$layers[[2]]$geom, "GeomTimelineLabel")
})
p <- earthquakes %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE)) +
geom_timeline() + geom_timeline_label()
test_that("Checking geom_timeline", {
# Checking geom_timeline layer class
expect_is(p$layers[[1]]$geom, "GeomTimeline")
})
test_that("Checking geom_timeline_label", {
# Checking geom_timeline_label layer class
expect_is(p$layers[[2]]$geom, "GeomTimelineLabel")
})
earthquakes %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
p <- earthquakes %>%
eq_clean_data() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
eq_map(annot_col = "DATE")
str(p)
expect_is(p, "leaflet")
expect_is(p, "htmlwidget")
str(eq_map)
GeomTimeline
str(GeomTimeline)
expect_is(GeomTimeline, "GeomTimeline")
expect_is(GeomTimeline, "GeomTimelineLabel")
q <- earthquakes magrittr::`%>%`
q <- magrittr::`%>%`(earthquakes, eq_clean_data())
library(visTools)
library(visTools)
devtools::use_build_ignore("R/hello.R")
devtools::document()
usethis::use_readme_md()
usethis::use_vignette()
usethis::use_vignette("visTools-examples")
devtools::load_all()
